1.从本地加载。
    使用自动更新，把需要下载的AssetBundle下载到本地。
    
2.从网上加载。
    同时把下载的资源进行缓存。缓存可以使用unity自带的缓存机制，也可以自己实现。
    网上加载的方式：
        1.使用Unity的WebRequest.
        2.使用http或其它下载库下载，然后从内存或文件中加载。
    缓存方式：
        1.使用Unity的AssetBundle的cace机制。只能配合Unity的WebRequest.
        2.自定义缓存机制。可适应WebRequest和自定义下载。缓存放在Request层。
    缓存位置：
        1.放在特殊位置。这个位置不放到search paths里。由request从这个目录加载。
        2.放在search paths前置位置。由Request正常加载。
    由于unity的缓存只能和WebRequest一起使用，所以目前使用自定义缓存。
    
3.架构：

                File
                  | \Data
                  |  \                                  Cache(Memory)
                  |   Request                     Load    
               Cache /      Asset(Bundle)               Loader
                  | /Data
                 Web
                 
    Request：
        同一个AssetBundle只能request一次。注意加载中和加载后都不能再request,除非AssetBundle被卸载。
    Loader:
        步骤：
            1.检查资源是否已经被加载，已经加载，则直接成功;完成函数的调用时机。
            2.检查资源是否正在被加载，正在加载，返回当前Loader;
            3.创建新的Loader.
        同步和异步共存的问题:
            先同步再异步没有问题;
            如果先异步，再同步，由于unity异步无法取消,又不好处理之前的异步，所以本次同步报错。如果不报错，把同步变成异步，那就失去了同步的意义。所以要么少使用同步，要么在明知不会和异步冲突时使用。
        Load资源返回Loader还是代理:
            返回loader不好处理cancel和已经加载完资源的情况。
            返回代理，必须创建一个代理类，有点浪费(大部分情况不需要处理返回值)。处理cancel很方便。
            最终还是返回loader对像，对于需要使用代理的，进行自定义包装。
        中止：
            
        
    Result:
        1.使用引用计数。
        2.retain/release表示占用和释放。
        3.缓存时计数加1，并用字段表示是否cache。防止清除cache时调用多次release。
        4.主动加载要被缓存。依赖加载不缓存。
        5.某一个资源加载完成后不要调用清除缓存函数，而在一批资源使用完成后调用。
        6.如果加载的资源要异步使用(包括当前帧最后)要主动使用retain,使用完release。
        